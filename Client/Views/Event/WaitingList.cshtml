@model IEnumerable<Client.ViewModels.WaitingList>


@{
    ViewData["Title"] = "WaitingList";
    Layout = "_Layout";
}

<head>
    <link rel="stylesheet" href="~/css/indexadmin.css" asp-append-version="true" />
    <style>
        img {
            width: 100px;
        }

        .align-items-center {
            background-color: #101130;
        }

        /* TABLES */
        .table {
            border-collapse: separate;
        }

        .table-hover > tbody > tr:hover > td,
        .table-hover > tbody > tr:hover > th {
            background-color: #eee;
        }

        .table thead > tr > th {
            border-bottom: 1px solid #C2C2C2;
            padding-bottom: 0;
        }

        .table tbody > tr > td {
            font-size: 0.875em;
            background: #f5f5f5;
            border-top: 10px solid #fff;
            vertical-align: middle;
            padding: 12px 8px;
        }

            .table tbody > tr > td:first-child,
            .table thead > tr > th:first-child {
                padding-left: 20px;
            }

        .table thead > tr > th span {
            border-bottom: 2px solid #C2C2C2;
            display: inline-block;
            padding: 0 5px;
            padding-bottom: 5px;
            font-weight: normal;
        }

        .align-items-center {
            align-items: center !important;
            background: #101130;
        }

        .btn-validate:hover {
            background-color: green;
            color: white;
        }

        .btn-delete:hover {
            background-color: red;
            color: white;
        }

        
    </style>
</head>

<table class="table mt-100 text-center justify-content-center" style="width: 70%; margin-left: auto; margin-right: auto;">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Email 
            </th>
            <th>
                Phone Number
            </th>
            <th>
                Invoice
            </th>
            <th>
                Actions
            </th>
            
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @if (item.Invoice != null)
                    {
                        <img class="myImg" src="data:image/jpeg;base64,@Convert.ToBase64String(item.Invoice)" alt="Poster" />
                        <div id="myModal" class="modal">
                            <span class="close">&times;</span>
                            <img class="modal-content" id="img01">
                            <div id="caption"></div>
                        </div>
                    }
                </td>
                <td>

                    <button onclick="validatePayment('@item.PaymentGuid')" class="btn btn-validate">
                        <i class="fas fa-check-circle"></i> Validate
                    </button>

                    <button onclick="deletePayment('@item.PaymentGuid')" class="btn btn-delete">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>

                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-center mt-10">
    <a class="btn btn-primary m-2" href="javascript:history.back();">Back</a>
    <a class="btn btn-primary m-2" href="/Event/Create">Add Event</a>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    var modal = document.getElementById("myModal");
    var images = document.getElementsByClassName("myImg");
    var modalImg = document.getElementById("img01");
    var captionText = document.getElementById("caption");

    // Loop through all the images
    for (var i = 0; i < images.length; i++) {
        var img = images[i];
        img.onclick = function () {
            modal.style.display = "block";
            modalImg.src = this.src;
            captionText.innerHTML = this.alt;
        }
    }

    var span = document.getElementsByClassName("close")[0];
    span.onclick = function () {
        modal.style.display = "none";
    }

    function deletePayment(paymentGuid) {
        Swal.fire({
            title: "Are you sure?",
            text: "This action cannot be undone.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                // AJAX request
                $.ajax({
                    url: "https://localhost:7042/api/Payment/" + paymentGuid,
                    type: "DELETE",
                    success: function (response) {
                        // Successful delete operation
                        Swal.fire({
                            title: "Item deleted!",
                            icon: "success"
                        }).then(() => {
                            location.reload();
                        });
                    },
                    error: function (xhr, status, error) {
                        // Error occurred during delete operation
                        console.log(xhr);
                        console.log(status);
                        console.log(error);
                        Swal.fire({
                            title: "Error",
                            text: "An error occurred while deleting the item.",
                            icon: "error"
                        });
                    }
                });
            }
        });
    }

    function validatePayment(paymentGuid) {
        Swal.fire({
            title: "Are you sure?",
            text: "This action cannot be undone.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, validate it!",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                // AJAX request to get payment data
                $.ajax({
                    url: "https://localhost:7042/api/Payment/" + paymentGuid,
                    type: "GET",
                    success: function (payment) {
                        var updatedData = {
                            guid: payment.data.guid,
                            userGuid: payment.data.userGuid,
                            eventGuid: payment.data.eventGuid,
                            invoice: payment.data.invoice,
                            isValid: true
                        };
                        // Update payment with PUT request
                        $.ajax({
                            url: "https://localhost:7042/api/Payment/",
                            type: "PUT",
                            data: JSON.stringify(updatedData),
                            contentType: "application/json",
                            success: function (response) {
                                // Successful validation operation
                                Swal.fire({
                                    title: "Item validated!",
                                    icon: "success"
                                }).then(() => {
                                    location.reload();
                                });
                            },
                            error: function (xhr, status, error) {
                                // Error occurred during validation operation
                                console.log(xhr);
                                console.log(status);
                                console.log(error);
                                Swal.fire({
                                    title: "Error",
                                    text: "An error occurred while validating the item.",
                                    icon: "error"
                                });
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        // Error occurred while retrieving payment data
                        console.log(xhr);
                        console.log(status);
                        console.log(error);
                        Swal.fire({
                            title: "Error",
                            text: "An error occurred while retrieving payment data.",
                            icon: "error"
                        });
                    }
                });
            }
        });
    } 
</script>
